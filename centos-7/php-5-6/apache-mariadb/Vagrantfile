# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'json'

confDir = File.expand_path(File.dirname(__FILE__))
configPath = confDir + "/config.json"

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
	# The most common configuration options are documented and commented below.
	# For a complete reference, please see the online documentation at
	# https://docs.vagrantup.com.

	if Vagrant::VERSION < '2.1.0' && !Vagrant.has_plugin?('vagrant-triggers')
		abort "You must have Vagrant version 2.1.0 or higher, or the vagrant-triggers plugin in order to proceed"
	end

	# Open JSON configuration file
	if File.exist? configPath then
		settings = JSON::parse(File.read(configPath))
	else
		abort "Config settings file not found in #{confDir}"
	end

	# Every Vagrant development environment requires a box. You can search for
	# boxes at https://atlas.hashicorp.com/search.
	config.vm.box = "centos/7"

	# Configure Local Variable To Access Scripts
    scripts_dir = File.dirname(__FILE__)

	# Create a forwarded port mapping which allows access to a specific port
	# within the machine from a port on the host machine.
	if settings.has_key?('forwarded_ports')
		settings['forwarded_ports'].each do |forwarded_port|
			if forwarded_port.has_key?('guest') && forwarded_port.has_key?('host')
				config.vm.network "forwarded_port", guest: forwarded_port['guest'], host: forwarded_port['host']

				if project.has_key?('database')
					if project['database'].has_key?('backup') && project['database']['backup'] && project['database'].has_key?('guest_folder') && project['database']['guest_folder']
						if project['database'].has_key?('guest_database')
							if project['database']['guest_database'].has_key?('name') && project['database']['guest_database']['name']
								if project['database']['guest_database'].has_key?('user')
									if project['database']['guest_database']['user'].has_key?('username') && project['database']['guest_database']['user']['username']
										if project['database']['guest_database']['user'].has_key?('password') && project['database']['guest_database']['user']['password']
											guest_folder = project['database']['guest_folder']
											database_name = project['database']['guest_database']['name']
											username = project['database']['guest_database']['user']['username']
											password = project['database']['guest_database']['user']['password']
											now = Time.now.strftime("%Y-%m-%dT%H-%M-%S")
											config.trigger.before :destroy do |trigger|
												trigger.warn = "Backing up mysql database #{database_name}..."
												trigger.run_remote = {
													inline: "mkdir -p #{guest_folder} && mysqldump --user=#{username} --password=#{password} --routines #{database_name} > #{guest_folder}/#{database_name}-#{now}.sql"
												}
											end
										end
									end
								end
							end
						end
					end
				end
			end
		end
	end

	# Enable provisioning with a shell script. Additional provisioners such as
	# Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
	# documentation for more information about their specific syntax and use.
	config.vm.provision "shell", path: "~/Documents/server/vagrant-setup/centos-7/php-5-6/apache-mariadb/scripts/vm-provision.sh"

	# Share an additional folder to the guest VM. The first argument is
	# the path on the host to the actual folder. The second argument is
	# the path on the guest to mount the folder. And the optional third
	# argument is a set of non-required options.
	if settings.has_key?('synced_folders')
		settings['synced_folders'].each do |synced_folder|
			if synced_folder.has_key?('guest') && synced_folder.has_key?('host')
				if synced_folder.has_key?('disabled') && synced_folder['disabled']
					config.vm.synced_folder synced_folder['host'], synced_folder['guest'], disabled: true
				else
					config.vm.synced_folder synced_folder['host'], synced_folder['guest']
				end
			end
		end
	end

	if settings.has_key?('projects')
		settings['projects'].each do |project|
			if project.has_key?('synced_folder') && project['synced_folder'].has_key?('guest') && project['synced_folder'].has_key?('host')
				# Shares a folder for each project
				config.vm.synced_folder project['synced_folder']['host'], project['synced_folder']['guest']
			end

			if project.has_key?('name')
				# Creates Apache configuration files and SSL config if N/A
				config.vm.provision "shell", path: '~/Documents/server/vagrant-setup/centos-7/php-5-6/apache-mariadb/scripts/apache-config.sh', run: "always" do |s|
					s.args = [project['name']]
				end
			end
		end
	end

	# Restart Apache
	config.vm.provision "shell", inline: 'systemctl restart httpd.service', run: "always"
end
